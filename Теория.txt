Гражданцев Арсений 11-306

1 Вопрос
Сериализация и десериализация - это процессы преобразования объекта в последовательность байтов (сериализация) и обратного преобразования последовательности байтов в объект (десериализация).
Сериализация часто используется для сохранения состояния объекта в файле или передаче его по сети.
Десериализация — это процесс восстановления объекта из этих байт.
В Java для сериализации используется интерфейс Serializable. Для него не нужно реализовывать ни одного метода.

2 Вопрос
1.Создание потока. Поток создается с помощью класса, реализующего интерфейс InputStream или OutputStream.
2.Чтение/запись данных. Данные читаются или записываются в поток с помощью методов read() и write().
3.Закрытие потока. Поток закрывается с помощью метода close(), что освобождает ресурсы, занятые потоком.
4.Запуск потока: После создания класса потока, нужно создать экземпляр этого класса
и вызвать метод start(). Метод запускает поток, вызывая метод run() в новом потоке исполнения.

3 Вопрос
Виды потоков:
В Java существуют два основных типа потоков: пользовательские и демоны.
Пользовательские потоки создаются для выполнения конкретных задач и продолжают работу 
до тех пор, пока их задача не будет выполнена или пока приложение не прервет их работу.
Они используются для задач, связанных с пользовательским интерфейсом или требующих
активного взаимодействия с пользователем.
Демоны - служат поддержкой пользовательским потокам, выполняя задачи в фоновом режиме. 
Они не мешают завершению JVM, даже если продолжают работать, и обычно заняты 
вспомогательными задачами, например, управлением памятью, не удерживая программу 
от завершения.

4 Вопрос
-Неблокирующий ввод/вывод. NIO позволяет приложениям выполнять другие задачи, пока 
операции ввода/вывода еще не завершены.
-Высокая производительность. NIO использует буферы и каналы для повышения производительности 
операций ввода/вывода.
-Масштабируемость. NIO хорошо подходит для приложений, которые должны обрабатывать большое 
количество одновременных подключений.

Java IO ориентируется на потоки, что подразумевает чтение и запись данных
по одному байту за раз, в то время как Java NIO предпочитает работу с буферами, что 
позволяет более гибко и быстро обрабатывать данные. Хотя Java IO поддерживает 
многопоточность, она использует блокирующий режим, где каждый поток должен дождаться
завершения операции ввода-вывода, что может привести к простою при высокой нагрузке. 
Java NIO, с другой стороны, предлагает более продвинутые возможности для работы 
с многопоточностью.